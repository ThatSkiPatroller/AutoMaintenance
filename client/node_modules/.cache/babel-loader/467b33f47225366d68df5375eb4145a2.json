{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trace\\\\Project 3\\\\AutoMaintenance\\\\client\\\\src\\\\pages\\\\NewAppointments\\\\NewAppointments.js\";\n// Importing React since we are using React.\nimport React, { Component } from \"react\";\nimport AppointmentsForm from './NewAppointmentForm';\nimport AppointmentAPI from '../../utils/AppointmentAPI';\nimport { withStyles } from 'material-ui/styles';\nimport Table, { TableBody, TableCell, TableHead, TableRow } from 'material-ui/Table';\nimport Paper from 'material-ui/Paper';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid'; // Import Sidebar component.\n\nimport Sidebar from '../../Components/Sidebar'; // Importing Navbar component.\n\nimport NavBar from '../../Components/AppBar';\nimport dealerData from '../../dealerData';\nimport queryString from 'query-string';\nimport { useParams } from \"react-router-dom\"; //Style\n\nconst styles = theme => ({\n  root: theme.mixins.gutters({\n    marginTop: theme.spacing.unit * 3,\n    borderStyle: 'solid',\n    borderWidth: 4,\n    borderColor: '#33658A',\n    display: 'block',\n    overflowX: 'auto',\n    maxWidth: '80%'\n  }),\n  table: {\n    minWidth: 700,\n    tableLayout: 'auto',\n    display: 'block',\n    width: '100%',\n    overflowX: 'auto'\n  },\n  tableWrapper: {\n    overflowX: 'auto'\n  },\n  row: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: 'theme.palette.background.default'\n    }\n  },\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%'\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3\n  },\n  heading: {\n    marginTop: 40\n  }\n});\n\nclass NewAppointments extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appointmentName: \"\",\n      appointmentDealer: \"\",\n      appointmentDate: \"\",\n      appointmentTime: \"\",\n      appointments: [],\n      appointmentNameError: \"\",\n      appointmentDealerError: \"\",\n      appointmentDateError: \"\",\n      appointmentTimeError: \"\",\n      formSuccessMessage: \"\",\n      dealerID: ''\n    };\n\n    this.loadAppointments = () => {\n      AppointmentAPI.getAppointments().then(res => {\n        console.log(res.data);\n        this.setState({\n          appointments: res.data\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.deleteAppointment = id => {\n      AppointmentAPI.deleteAppointment(id).then(res => this.loadAppointments()).catch(err => console.log(err));\n    };\n\n    this.handleAppointmentNameChange = event => {\n      this.setState({\n        appointmentName: event.target.value,\n        appointmentNameError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleAppointmentDealerChange = event => {\n      this.setState({\n        appointmentDealer: event.target.value,\n        appointmentDealerError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleAppointmentDateChange = event => {\n      this.setState({\n        appointmentDate: event.target.value,\n        appointmentDateError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleAppointmentTimeChange = event => {\n      this.setState({\n        appointmentTime: event.target.value,\n        appointmentTimeError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault(); // If appointment name field is empty when user submits form, show error.\n\n      if (this.state.appointmentName === \"\") {\n        this.setState({\n          appointmentNameError: \"Enter a name for the appointment.\"\n        });\n      } // if the appointment date field is empty when user submits form, show error.\n\n\n      if (this.state.appointmentDate === \"\" || this.state.appointmentDate === \"mm/dd/yyyy\") {\n        this.setState({\n          appointmentDateError: \"Use the date picker to select the date of the appointment.\"\n        });\n      } // if the appointment time field is empty when user submits form, show error.\n\n\n      if (this.state.appointmentTime === \"\") {\n        this.setState({\n          appointmentTimeError: \"Use the time picker to select the time of the appointment in HH:MM AM/PM format.\"\n        });\n      } else {\n        const userId = localStorage.getItem('userId');\n        console.log('user id', userId);\n        AppointmentAPI.saveAppointment({\n          appointmentName: this.state.appointmentName,\n          dealerId: this.state.dealerID,\n          date: this.state.appointmentDate,\n          time: this.state.appointmentTime,\n          userId: userId\n        }).then(res => {\n          console.log(\"saved\");\n          this.loadAppointments();\n        }).catch(err => console.log(err));\n        this.setState({\n          formSuccessMessage: `${this.state.appointmentName} with ${this.state.dealerID} on ${this.state.appointmentDate} added successfully!`\n        }); // Clear form\n\n        document.getElementById('appointment-form').reset();\n      }\n    };\n  }\n\n  // When the component mounts, load all appointments and save them to this.state.appointments.\n  componentDidMount() {\n    console.log(this.props.match.params.id);\n    this.setState({\n      dealerID: this.props.match.params.id\n    });\n  } // Loads all appointments and saves them to this.state.appointments.\n\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return [/*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.appFrame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"main\", {\n      className: classes.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 70\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"display1\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, \"Appointments\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-content-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      className: classes.heading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AppointmentsForm, {\n      Dealers: this.state.Dealers,\n      clinics: this.state.clinics,\n      handleFormSubmit: this.handleFormSubmit,\n      handleAppointmentNameChange: this.handleAppointmentNameChange,\n      handleAppointmentDealerChange: this.handleAppointmentDealerChange,\n      handleAppointmentDateChange: this.handleAppointmentDateChange,\n      handleAppointmentTimeChange: this.handleAppointmentTimeChange,\n      handleAppointmentClinicChange: this.handleAppointmentClinicChange,\n      appointmentNameError: this.state.appointmentNameError,\n      appointmentDealerError: this.state.appointmentDealerError,\n      appointmentDateError: this.state.appointmentDateError,\n      appointmentTimeError: this.state.appointmentTimeError,\n      formSuccessMessage: this.state.formSuccessMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 19\n      }\n    })))))))];\n  }\n\n} // Exporting the Appointments component\n// so that the App.js file can use/render the Appointments page.\n\n\nexport default withStyles(styles)(NewAppointments);","map":{"version":3,"sources":["C:/Users/Trace/Project 3/AutoMaintenance/client/src/pages/NewAppointments/NewAppointments.js"],"names":["React","Component","AppointmentsForm","AppointmentAPI","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","Typography","Grid","Sidebar","NavBar","dealerData","queryString","useParams","styles","theme","root","mixins","gutters","marginTop","spacing","unit","borderStyle","borderWidth","borderColor","display","overflowX","maxWidth","table","minWidth","tableLayout","width","tableWrapper","row","backgroundColor","appFrame","zIndex","overflow","position","content","flexGrow","padding","heading","NewAppointments","state","appointmentName","appointmentDealer","appointmentDate","appointmentTime","appointments","appointmentNameError","appointmentDealerError","appointmentDateError","appointmentTimeError","formSuccessMessage","dealerID","loadAppointments","getAppointments","then","res","console","log","data","setState","catch","err","deleteAppointment","id","handleAppointmentNameChange","event","target","value","handleAppointmentDealerChange","handleAppointmentDateChange","handleAppointmentTimeChange","handleFormSubmit","preventDefault","userId","localStorage","getItem","saveAppointment","dealerId","date","time","document","getElementById","reset","componentDidMount","props","match","params","render","classes","Dealers","clinics","handleAppointmentClinicChange"],"mappings":"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","sourcesContent":["// Importing React since we are using React.\nimport React, { Component } from \"react\";\nimport AppointmentsForm from './NewAppointmentForm';\nimport AppointmentAPI from '../../utils/AppointmentAPI';\nimport { withStyles } from 'material-ui/styles';\nimport Table, { TableBody, TableCell, TableHead, TableRow } from 'material-ui/Table';\nimport Paper from 'material-ui/Paper';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid';\n// Import Sidebar component.\nimport Sidebar from '../../Components/Sidebar';\n// Importing Navbar component.\nimport NavBar from '../../Components/AppBar';\nimport dealerData from '../../dealerData'\nimport queryString from 'query-string';\nimport { useParams } from \"react-router-dom\"\n\n//Style\nconst styles = theme => ({\n  root: theme.mixins.gutters({\n    marginTop: theme.spacing.unit * 3,\n    borderStyle: 'solid',\n    borderWidth: 4,\n    borderColor: '#33658A',\n    display: 'block',\n    overflowX: 'auto',\n    maxWidth: '80%',\n  }),\n  table: {\n    minWidth: 700,\n    tableLayout: 'auto',\n    display: 'block',\n    width: '100%',\n    overflowX: 'auto',\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n  row: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: 'theme.palette.background.default',\n    },\n  },\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%',\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3,\n  },\n  heading: {\n    marginTop: 40,\n  },\n});\n\nclass NewAppointments extends Component {\n  state = {\n    appointmentName: \"\",\n    appointmentDealer: \"\",\n    appointmentDate: \"\",\n    appointmentTime: \"\",\n    appointments: [],\n    appointmentNameError: \"\",\n    appointmentDealerError: \"\",\n    appointmentDateError: \"\",\n    appointmentTimeError: \"\",\n    formSuccessMessage: \"\",\n    dealerID: '',\n  };\n  // When the component mounts, load all appointments and save them to this.state.appointments.\n  componentDidMount() {\n    console.log(this.props.match.params.id)\n      this.setState({ dealerID: this.props.match.params.id})\n  }\n\n  // Loads all appointments and saves them to this.state.appointments.\n  loadAppointments = () => {\n    AppointmentAPI.getAppointments()\n      .then(res => {\n        console.log(res.data)\n        this.setState({ appointments: res.data})\n      })\n      .catch(err => console.log(err));\n  };\n\n  // Deletes an appointment from the database with a given id, then reloads appointments from the db\n  deleteAppointment = id => {\n    AppointmentAPI.deleteAppointment(id)\n      .then(res => this.loadAppointments())\n      .catch(err => console.log(err));\n  };\n\n  \n  \n\n  // Keep track of what user enters for appointment name so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleAppointmentNameChange = (event) => {\n    this.setState({ \n      appointmentName: event.target.value,\n      appointmentNameError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  // Keep track of what user selects for Dealer so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleAppointmentDealerChange = (event) => {\n    this.setState({ \n      appointmentDealer: event.target.value,\n      appointmentDealerError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  // Keep track of what user types into appointment date input field so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleAppointmentDateChange = (event) => {\n    this.setState({ \n      appointmentDate: event.target.value,\n      appointmentDateError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  // Keep track of what user types into appointment time input field so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleAppointmentTimeChange = (event) => {\n    this.setState({ \n      appointmentTime: event.target.value,\n      appointmentTimeError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n        // If appointment name field is empty when user submits form, show error.\n    if (this.state.appointmentName === \"\") {\n      this.setState({\n        appointmentNameError: \"Enter a name for the appointment.\"\n      })\n    }\n\n    // if the appointment date field is empty when user submits form, show error.\n    if (this.state.appointmentDate === \"\" || this.state.appointmentDate === \"mm/dd/yyyy\") {\n      this.setState({\n        appointmentDateError: \"Use the date picker to select the date of the appointment.\"\n      })\n    }\n\n    // if the appointment time field is empty when user submits form, show error.\n    if (this.state.appointmentTime === \"\") {\n      this.setState({\n        appointmentTimeError: \"Use the time picker to select the time of the appointment in HH:MM AM/PM format.\"\n      })\n    }\n\n    else {\n      const userId = localStorage.getItem('userId');\n      console.log('user id', userId)\n\n      AppointmentAPI.saveAppointment({\n        appointmentName: this.state.appointmentName,\n        dealerId: this.state.dealerID,\n        date: this.state.appointmentDate,\n        time: this.state.appointmentTime,\n        userId: userId\n      })\n        .then(res => {\n          console.log(\"saved\")\n          this.loadAppointments()\n        } )\n        .catch(err => console.log(err));\n\n      this.setState({\n          formSuccessMessage: `${this.state.appointmentName} with ${this.state.dealerID} on ${this.state.appointmentDate} added successfully!`,\n      });\n\n      \n      // Clear form\n      document.getElementById('appointment-form').reset();\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    \n\n    return [\n      <NavBar />,\n      <div className={classes.appFrame}>\n        <Sidebar />\n        <main className={classes.content}>\n          <div style={{ padding: 70 }}>\n            <Grid container spacing={24}>\n              <Grid item xs={12}>\n                <Typography variant=\"display1\" align=\"left\">\n                  Appointments\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <div className=\"main-content-section\">\n              <Grid container spacing={24}>\n              </Grid>\n\n              <Grid container spacing={24} className={classes.heading}>\n                <Grid item xs={12}>\n                  <AppointmentsForm\n                    Dealers={this.state.Dealers}\n                    clinics={this.state.clinics}\n                    handleFormSubmit={this.handleFormSubmit}\n                    handleAppointmentNameChange={this.handleAppointmentNameChange}\n                    handleAppointmentDealerChange={this.handleAppointmentDealerChange}\n                    handleAppointmentDateChange={this.handleAppointmentDateChange}\n                    handleAppointmentTimeChange={this.handleAppointmentTimeChange}\n                    handleAppointmentClinicChange={this.handleAppointmentClinicChange}\n                    appointmentNameError = {this.state.appointmentNameError}\n                    appointmentDealerError = {this.state.appointmentDealerError}\n                    appointmentDateError  = {this.state.appointmentDateError}\n                    appointmentTimeError = {this.state.appointmentTimeError}\n                    formSuccessMessage = {this.state.formSuccessMessage} \n                  />\n                </Grid>\n              </Grid>\n            </div>\n          </div>\n        </main>\n      </div>\n    ];\n  }\n}\n\n// Exporting the Appointments component\n// so that the App.js file can use/render the Appointments page.\nexport default withStyles(styles)(NewAppointments);\n"]},"metadata":{},"sourceType":"module"}