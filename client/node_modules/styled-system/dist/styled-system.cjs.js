'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var PropTypes = _interopDefault(require('prop-types'));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var noop = function noop(n) {
  return n;
};

var propTypes = {
  numberOrString: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  responsive: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array])
};

var defaultBreakpoints = [40, 52, 64].map(function (n) {
  return n + 'em';
});
var is = function is(n) {
  return n !== undefined && n !== null;
};
var num = function num(n) {
  return typeof n === 'number' && !isNaN(n);
};
var px = function px(n) {
  return num(n) ? n + 'px' : n;
};

var get$1 = function get$$1(obj) {
  for (var _len = arguments.length, paths = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    paths[_key - 1] = arguments[_key];
  }

  return paths.join('.').split('.').reduce(function (a, b) {
    return a && a[b] ? a[b] : null;
  }, obj);
};

var themeGet = function themeGet(paths, fallback) {
  return function (props) {
    return get$1(props.theme, paths) || fallback;
  };
};

var cloneFunc = function cloneFunc(fn) {
  return function () {
    return fn.apply(undefined, arguments);
  };
};

var merge = function merge(a, b) {
  return Object.assign({}, a, b, Object.keys(b || {}).reduce(function (obj, key) {
    var _Object$assign;

    return Object.assign(obj, (_Object$assign = {}, _Object$assign[key] = a[key] !== null && _typeof(a[key]) === 'object' ? merge(a[key], b[key]) : b[key], _Object$assign));
  }, {}));
};

var compose = function compose() {
  for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    funcs[_key2] = arguments[_key2];
  }

  var fn = function fn(props) {
    return funcs.map(function (fn) {
      return fn(props);
    }).filter(Boolean).reduce(merge, {});
  };

  fn.propTypes = funcs.map(function (fn) {
    return fn.propTypes;
  }).reduce(merge, {});
  return fn;
};

var createMediaQuery = function createMediaQuery(n) {
  return '@media screen and (min-width: ' + n + ')';
};

var style = function style(_ref) {
  var _fn$propTypes;

  var prop = _ref.prop,
      cssProperty = _ref.cssProperty,
      key = _ref.key,
      getter = _ref.getter,
      transformValue = _ref.transformValue,
      _ref$scale = _ref.scale,
      defaultScale = _ref$scale === undefined ? {} : _ref$scale;

  var css = cssProperty || prop;
  var transform = transformValue || getter || noop;
  var fn = function fn(props) {
    var val = props[prop];
    if (!is(val)) return null;

    var scale = get$1(props.theme, key) || defaultScale;
    var style = function style(n) {
      var _ref2;

      return is(n) ? (_ref2 = {}, _ref2[css] = transform(get$1(scale, n) || n), _ref2) : null;
    };

    if (!Array.isArray(val)) {
      return style(val);
    }

    // how to hoist this up??
    var breakpoints = [null].concat((get$1(props.theme, 'breakpoints') || defaultBreakpoints).map(createMediaQuery));

    var styles = {};

    for (var i = 0; i < val.length; i++) {
      var media = breakpoints[i];
      if (!media) {
        styles = style(val[i]);
        continue;
      }
      var rule = style(val[i]);
      if (!rule) continue;
      styles[media] = rule;
    }

    return styles;
  };

  fn.propTypes = (_fn$propTypes = {}, _fn$propTypes[prop] = cloneFunc(propTypes.responsive), _fn$propTypes);

  fn.propTypes[prop].meta = {
    prop: prop,
    themeKey: key,
    styleType: 'responsive'
  };

  return fn;
};

var util = /*#__PURE__*/Object.freeze({
  propTypes: propTypes,
  defaultBreakpoints: defaultBreakpoints,
  is: is,
  num: num,
  px: px,
  get: get$1,
  themeGet: themeGet,
  cloneFunc: cloneFunc,
  merge: merge,
  compose: compose,
  createMediaQuery: createMediaQuery,
  style: style
});

var variant = (function (_ref) {
  var _fn$propTypes;

  var key = _ref.key,
      _ref$prop = _ref.prop,
      prop = _ref$prop === undefined ? 'variant' : _ref$prop;

  var fn = function fn(props) {
    return get$1(props.theme, key, props[prop]) || null;
  };
  fn.propTypes = (_fn$propTypes = {}, _fn$propTypes[prop] = propTypes.numberOrString, _fn$propTypes);
  return fn;
});

var isNegative = function isNegative(n) {
  return n < 0;
};

var REG = /^[mp][trblxy]?$/;

var properties = {
  m: 'margin',
  p: 'padding'
};

var directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};

var getProperties = function getProperties(key) {
  var _key$split = key.split(''),
      a = _key$split[0],
      b = _key$split[1];

  var property = properties[a];
  var direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(function (dir) {
    return property + dir;
  }) : [property + direction];
};

var getValue = function getValue(scale) {
  return function (n) {
    if (!num(n)) {
      return scale[n] || n;
    }
    var abs = Math.abs(n);
    var neg = isNegative(n);
    var value = scale[abs] || abs;
    if (!num(value)) {
      return neg ? '-' + value : value;
    }
    return px(value * (neg ? -1 : 1));
  };
};

var defaultScale = [0, 4, 8, 16, 32, 64, 128, 256, 512];

var space = function space(props) {
  var keys = Object.keys(props).filter(function (key) {
    return REG.test(key);
  }).sort();
  var scale = get$1(props.theme, 'space') || defaultScale;
  var getStyle = getValue(scale);

  return keys.map(function (key) {
    var value = props[key];
    var properties = getProperties(key);

    var style$$1 = function style$$1(n) {
      return is(n) ? properties.reduce(function (a, prop) {
        var _babelHelpers$extends;

        return _extends({}, a, (_babelHelpers$extends = {}, _babelHelpers$extends[prop] = getStyle(n), _babelHelpers$extends));
      }, {}) : null;
    };

    if (!Array.isArray(value)) {
      return style$$1(value);
    }

    var breakpoints = [null].concat((get$1(props.theme, 'breakpoints') || defaultBreakpoints).map(createMediaQuery));

    var styles = {};

    for (var i = 0; i < value.length; i++) {
      var media = breakpoints[i];
      if (!media) {
        styles = style$$1(value[i]);
        continue;
      }
      var rule = style$$1(value[i]);
      if (!rule) continue;
      styles[media] = rule;
    }

    return styles;
  }).reduce(merge, {});
};

space.propTypes = {
  m: cloneFunc(propTypes.responsive),
  mt: cloneFunc(propTypes.responsive),
  mr: cloneFunc(propTypes.responsive),
  mb: cloneFunc(propTypes.responsive),
  ml: cloneFunc(propTypes.responsive),
  mx: cloneFunc(propTypes.responsive),
  my: cloneFunc(propTypes.responsive),
  p: cloneFunc(propTypes.responsive),
  pt: cloneFunc(propTypes.responsive),
  pr: cloneFunc(propTypes.responsive),
  pb: cloneFunc(propTypes.responsive),
  pl: cloneFunc(propTypes.responsive),
  px: cloneFunc(propTypes.responsive),
  py: cloneFunc(propTypes.responsive)
};

var meta = function meta(prop) {
  return {
    prop: prop,
    themeKey: 'space',
    styleType: 'responsive'
  };
};

Object.keys(space.propTypes).forEach(function (prop) {
  space.propTypes[prop].meta = meta(prop);
});

var getWidth = function getWidth(n) {
  return !num(n) || n > 1 ? px(n) : n * 100 + '%';
};

var width = style({
  prop: 'width',
  transformValue: getWidth
});

var fontSize = style({
  prop: 'fontSize',
  key: 'fontSizes',
  transformValue: px,
  scale: [12, 14, 16, 20, 24, 32, 48, 64, 72]
});

var textColor = style({
  prop: 'color',
  key: 'colors'
});

var bgColor = style({
  prop: 'bg',
  cssProperty: 'backgroundColor',
  key: 'colors'
});

var color = compose(textColor, bgColor);

// typography
var fontFamily = style({
  prop: 'fontFamily',
  key: 'fonts'
});

var textAlign = style({
  prop: 'textAlign'
});

var lineHeight = style({
  prop: 'lineHeight',
  key: 'lineHeights'
});

var fontWeight = style({
  prop: 'fontWeight',
  key: 'fontWeights'
});

var letterSpacing = style({
  prop: 'letterSpacing',
  key: 'letterSpacings',
  transformValue: px
});

// layout
var display = style({
  prop: 'display'
});

var maxWidth = style({
  prop: 'maxWidth',
  key: 'maxWidths',
  transformValue: px
});

var minWidth = style({
  prop: 'minWidth',
  key: 'minWidths',
  transformValue: px
});

var height = style({
  prop: 'height',
  key: 'heights',
  transformValue: px
});

var maxHeight = style({
  prop: 'maxHeight',
  key: 'maxHeights',
  transformValue: px
});

var minHeight = style({
  prop: 'minHeight',
  key: 'minHeights',
  transformValue: px
});

var sizeWidth = style({
  prop: 'size',
  cssProperty: 'width',
  transformValue: px
});

var sizeHeight = style({
  prop: 'size',
  cssProperty: 'height',
  transformValue: px
});

var size = compose(sizeHeight, sizeWidth);

var ratioPadding = style({
  prop: 'ratio',
  cssProperty: 'paddingBottom',
  transformValue: function transformValue(n) {
    return n * 100 + '%';
  }
});

var ratio = function ratio(props) {
  return props.ratio ? _extends({
    height: 0
  }, ratioPadding(props)) : null;
};
ratio.propTypes = _extends({}, ratioPadding.propTypes);

var verticalAlign = style({
  prop: 'verticalAlign'
});

// flexbox
var alignItems = style({
  prop: 'alignItems'
});

var alignContent = style({
  prop: 'alignContent'
});

var justifyContent = style({
  prop: 'justifyContent'
});

var flexWrap = style({
  prop: 'flexWrap'
});

var flexBasis = style({
  prop: 'flexBasis',
  transformValue: getWidth
});

var flexDirection = style({
  prop: 'flexDirection'
});

var flex = style({
  prop: 'flex'
});

var justifySelf = style({
  prop: 'justifySelf'
});

var alignSelf = style({
  prop: 'alignSelf'
});

var order = style({
  prop: 'order'
});

// grid
var gridGap = style({
  prop: 'gridGap',
  transformValue: px,
  key: 'space'
});

var gridColumnGap = style({
  prop: 'gridColumnGap',
  transformValue: px,
  key: 'space'
});

var gridRowGap = style({
  prop: 'gridRowGap',
  transformValue: px,
  key: 'space'
});

var gridColumn = style({
  prop: 'gridColumn'
});

var gridRow = style({
  prop: 'gridRow'
});

var gridAutoFlow = style({
  prop: 'gridAutoFlow'
});

var gridAutoColumns = style({
  prop: 'gridAutoColumns'
});

var gridAutoRows = style({
  prop: 'gridAutoRows'
});

var gridTemplateColumns = style({
  prop: 'gridTemplateColumns'
});

var gridTemplateRows = style({
  prop: 'gridTemplateRows'
});

// borders
var getBorder = function getBorder(n) {
  return num(n) && n > 0 ? n + 'px solid' : n;
};

var border = style({
  prop: 'border',
  key: 'borders',
  transformValue: getBorder
});

var borderTop = style({
  prop: 'borderTop',
  key: 'borders',
  transformValue: getBorder
});

var borderRight = style({
  prop: 'borderRight',
  key: 'borders',
  transformValue: getBorder
});

var borderBottom = style({
  prop: 'borderBottom',
  key: 'borders',
  transformValue: getBorder
});

var borderLeft = style({
  prop: 'borderLeft',
  key: 'borders',
  transformValue: getBorder
});

var borders = compose(border, borderTop, borderRight, borderBottom, borderLeft);

var borderColor = style({
  prop: 'borderColor',
  key: 'colors'
});

var borderRadius = style({
  prop: 'borderRadius',
  key: 'radii',
  transformValue: px
});

var boxShadow = style({
  prop: 'boxShadow',
  key: 'shadows'
});

var opacity = style({
  prop: 'opacity'
});

// backgrounds
var background = style({
  prop: 'background'
});

var backgroundImage = style({
  prop: 'backgroundImage'
});

var backgroundSize = style({
  prop: 'backgroundSize'
});

var backgroundPosition = style({
  prop: 'backgroundPosition'
});

var backgroundRepeat = style({
  prop: 'backgroundRepeat'
});

// position
var position = style({
  prop: 'position'
});

var zIndex = style({
  prop: 'zIndex'
});

var top = style({
  prop: 'top',
  transformValue: px
});

var right = style({
  prop: 'right',
  transformValue: px
});

var bottom = style({
  prop: 'bottom',
  transformValue: px
});

var left = style({
  prop: 'left',
  transformValue: px
});

var textStyle = variant({
  prop: 'textStyle',
  key: 'textStyles'
});

var colorStyle = variant({
  prop: 'colors',
  key: 'colorStyles'
});

var buttonStyle = variant({
  key: 'buttons'
});

var styles = /*#__PURE__*/Object.freeze({
  width: width,
  fontSize: fontSize,
  textColor: textColor,
  bgColor: bgColor,
  color: color,
  fontFamily: fontFamily,
  textAlign: textAlign,
  lineHeight: lineHeight,
  fontWeight: fontWeight,
  letterSpacing: letterSpacing,
  display: display,
  maxWidth: maxWidth,
  minWidth: minWidth,
  height: height,
  maxHeight: maxHeight,
  minHeight: minHeight,
  sizeWidth: sizeWidth,
  sizeHeight: sizeHeight,
  size: size,
  ratioPadding: ratioPadding,
  ratio: ratio,
  verticalAlign: verticalAlign,
  alignItems: alignItems,
  alignContent: alignContent,
  justifyContent: justifyContent,
  flexWrap: flexWrap,
  flexBasis: flexBasis,
  flexDirection: flexDirection,
  flex: flex,
  justifySelf: justifySelf,
  alignSelf: alignSelf,
  order: order,
  gridGap: gridGap,
  gridColumnGap: gridColumnGap,
  gridRowGap: gridRowGap,
  gridColumn: gridColumn,
  gridRow: gridRow,
  gridAutoFlow: gridAutoFlow,
  gridAutoColumns: gridAutoColumns,
  gridAutoRows: gridAutoRows,
  gridTemplateColumns: gridTemplateColumns,
  gridTemplateRows: gridTemplateRows,
  border: border,
  borderTop: borderTop,
  borderRight: borderRight,
  borderBottom: borderBottom,
  borderLeft: borderLeft,
  borders: borders,
  borderColor: borderColor,
  borderRadius: borderRadius,
  boxShadow: boxShadow,
  opacity: opacity,
  background: background,
  backgroundImage: backgroundImage,
  backgroundSize: backgroundSize,
  backgroundPosition: backgroundPosition,
  backgroundRepeat: backgroundRepeat,
  position: position,
  zIndex: zIndex,
  top: top,
  right: right,
  bottom: bottom,
  left: left,
  textStyle: textStyle,
  colorStyle: colorStyle,
  buttonStyle: buttonStyle,
  space: space
});

var omit = function omit(obj, blacklist) {
  var next = {};
  for (var key in obj) {
    if (blacklist.indexOf(key) > -1) continue;
    next[key] = obj[key];
  }
  return next;
};

var funcs = Object.keys(styles).map(function (key) {
  return styles[key];
}).filter(function (fn) {
  return typeof fn === 'function';
});

var blacklist = funcs.reduce(function (a, fn) {
  return [].concat(a, Object.keys(fn.propTypes || {}));
}, ['theme']);

var mixed = (function (props) {
  return funcs.map(function (fn) {
    return fn(props);
  }).reduce(merge, omit(props, blacklist));
});

exports.util = util;
exports.styles = styles;
exports.style = style;
exports.themeGet = themeGet;
exports.merge = merge;
exports.compose = compose;
exports.space = space;
exports.width = width;
exports.fontSize = fontSize;
exports.textColor = textColor;
exports.bgColor = bgColor;
exports.color = color;
exports.fontFamily = fontFamily;
exports.textAlign = textAlign;
exports.lineHeight = lineHeight;
exports.fontWeight = fontWeight;
exports.letterSpacing = letterSpacing;
exports.display = display;
exports.maxWidth = maxWidth;
exports.minWidth = minWidth;
exports.height = height;
exports.maxHeight = maxHeight;
exports.minHeight = minHeight;
exports.size = size;
exports.ratio = ratio;
exports.verticalAlign = verticalAlign;
exports.alignItems = alignItems;
exports.alignContent = alignContent;
exports.justifyContent = justifyContent;
exports.flexWrap = flexWrap;
exports.flexDirection = flexDirection;
exports.flex = flex;
exports.flexBasis = flexBasis;
exports.justifySelf = justifySelf;
exports.alignSelf = alignSelf;
exports.order = order;
exports.gridGap = gridGap;
exports.gridColumnGap = gridColumnGap;
exports.gridRowGap = gridRowGap;
exports.gridColumn = gridColumn;
exports.gridRow = gridRow;
exports.gridAutoFlow = gridAutoFlow;
exports.gridAutoColumns = gridAutoColumns;
exports.gridAutoRows = gridAutoRows;
exports.gridTemplateColumns = gridTemplateColumns;
exports.gridTemplateRows = gridTemplateRows;
exports.border = border;
exports.borderTop = borderTop;
exports.borderRight = borderRight;
exports.borderBottom = borderBottom;
exports.borderLeft = borderLeft;
exports.borders = borders;
exports.borderColor = borderColor;
exports.borderRadius = borderRadius;
exports.boxShadow = boxShadow;
exports.opacity = opacity;
exports.background = background;
exports.backgroundImage = backgroundImage;
exports.backgroundSize = backgroundSize;
exports.backgroundPosition = backgroundPosition;
exports.backgroundRepeat = backgroundRepeat;
exports.position = position;
exports.zIndex = zIndex;
exports.top = top;
exports.right = right;
exports.bottom = bottom;
exports.left = left;
exports.textStyle = textStyle;
exports.colorStyle = colorStyle;
exports.buttonStyle = buttonStyle;
exports.variant = variant;
exports.mixed = mixed;
exports.responsiveStyle = style;
exports.complexStyle = variant;
